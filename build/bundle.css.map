{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<!-- Just some notes: -->\n<!-- \n\t- For Svelte, the focus of our work shoudl be on the src folder only.\n\t- As the public folder is where the static and built files will be stored at.\n\t- App.svelte is our root component.\n\t- For running svelte in localhost: npm run dev\n\t- To build svelte project into production-ready static files: npm run build\t\t(Then pick up all the files created in the public folder.)\n\t- \n -->\n \n<script>\nimport router, { curRoute } from './routes/router.js';\nimport RouterLink from './routes/RouterLink.svelte';\n\nfunction handlerBackNavigation(event){\n\tif (!event || !event.state || !event.state.path) {\n\t\tcurRoute.set('/')\t\t// If null, go back to main page.\n\t} else {\n\t\tcurRoute.set(event.state.path)\n\t}\n}\n\n// Using the 'export' keyword allows a variable to be passed down from the parent component. Here the parent is main.js where we specify the property 'name' = 'world'.\nexport let name;\n\n\n// INTERNATIONALIZATION SUPPORT\nimport { message } from './messages.js';\nlet msg = message;\n\n// You can pass text from the child component to be used by the parent component's method like so\nfunction getMessage(event) {\n\tgetMessageSupport(event.detail.name, event.detail.value);\n}\n\nfunction getMessageSupport(storageName, lang) {\n\tlet request = new XMLHttpRequest();\n\trequest.overrideMimeType(\"application/json\");\n\tif (window.location.hostname == 'localhost') {\n\t\trequest.open('GET', '/i18n/messages_' + lang + '.json', true);\n\t} else {\n\t\t// For github since it has that additional URL path\n\t\trequest.open('GET', '/svelte-app/i18n/messages_' + lang + '.json', true);\n\t}\n\trequest.onload = function() {\n\t\tif (request.responseText) {\n\t\t\tmsg = JSON.parse(request.responseText);\n\t\t\tif (storageName) {\t// only store if not null - if null ignore\n\t\t\t\twindow.localStorage.setItem(storageName, lang);\n\t\t\t}\n\t\t}\n\t};\n\trequest.send();\n}\n\n// You may want to put a loading screen here if you detect that the user is not using english. This is to cater some time to load the correct language texts.\nvar currentLang = window.localStorage.getItem('APP_LANGUAGE');\nif (currentLang && currentLang != 'en') {\n\talert(1);\n\t// Add loading screen here\t\n}\n\n// Alternative to onload event - USEFUL for Svelte cos everything is pre-compiled\n// Here we gotta retrieve the language properties when the whole page loads\nwindow.document.onreadystatechange = function () {\n\tif (document.readyState === 'complete') {\n\t\tvar val = window.localStorage.getItem('APP_LANGUAGE');\n\t\tif (val) {\n\t\t\tgetMessageSupport(null, val);\n\t\t\t// Place to remove the loading screen\n\t\t}\n\t}\n}\n</script>\n\n<!-- Event handler to handle 'back' button events -->\n<svelte:window on:popstate={handlerBackNavigation} />\n<main class=\"text-center px-1 m-0\">\n\t<h1 class=\"title-header uppercase font-hairline m-0 p-4 text-5xl md:text-6xl lg:text-6xl\">{msg.app.title + ' ' + name}!</h1>\n\t<div class=\"nav-header font-medium text-sm md:text-base lg:text-base pl-4 pr-4\">\n\t\t<RouterLink page={{path: '/', name: msg.app.navbar.homepage}} />&emsp;&emsp;|&emsp;&emsp;\n\t\t<RouterLink page={{path: '/one', name: msg.app.navbar.pageone}} />&emsp;&emsp;|&emsp;&emsp;\n\t\t<RouterLink page={{path: '/two', name: msg.app.navbar.pagetwo}} />&emsp;&emsp;|&emsp;&emsp;\n\t\t<RouterLink page={{path: '/three', name: msg.app.navbar.pagethree}} />\n\t</div>\n\t<br>\n\t<div id=\"pageContent\" class=\"container max-w-xs sm:max-w-2xl md:max-w-4xl\">\n\t\t<!-- Page component updates here -->\n\t\t<svelte:component this={router[$curRoute]} {msg} on:toggleLang={getMessage}/>\n\t\t<!-- Note:\n\t\t\tTHIS IS HOW YOU CALL A METHOD IN THE PARENT COMPONENT FROM CHILD COMPONENT.\n\n\t\t\tThe 'on:toggleLang={getMessage}' part is only used by Home.svelte (child) when its triggering an event\n\t\t\tto change the application's overall langugage. The child components do not use it.\n\t\t -->\n\t</div>\n</main>\n\n<style>\n\t/* main {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 80%;\n\t\tmargin: 0 auto;\n\t} */\n\n\t/* h1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t} */\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAiHC,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC"
}