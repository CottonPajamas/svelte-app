{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../One.svelte"
  ],
  "sourcesContent": [
    "<!-- Just some notes: -->\n<!-- \n\t- For Svelte, the focus of our work shoudl be on the src folder only.\n\t- As the public folder is where the static and built files will be stored at.\n\t- App.svelte is our root component.\n -->\n \n<script>\n\timport router, { curRoute } from './routes/router.js';\n\timport RouterLink from './routes/RouterLink.svelte';\n\t\n\tfunction handlerBackNavigation(event){\n\t\tif (!event || !event.state || !event.state.path) {\n\t\t\tcurRoute.set('/')\t\t// If null, go back to main page.\n\t\t} else {\n\t\t\tcurRoute.set(event.state.path)\n\t\t}\n\t}\n\n\t// Using the 'export' keyword allows a variable to be passed down from the parent component. Here the parent is main.js where we specify the property 'name' = 'world'.\n\texport let name;\n</script>\n\n\t<svelte:window on:popstate={handlerBackNavigation} />\n\n\n<main>\n\t<h1>Hello {name}!</h1>\n\t<div>\n\t\t<RouterLink page={{path: '/', name: 'Home'}} />&emsp;&emsp;|&emsp;&emsp;\n\t\t<RouterLink page={{path: '/one', name: 'Page One'}} />&emsp;&emsp;|&emsp;&emsp;\n\t\t<RouterLink page={{path: '/two', name: 'Page Two'}} />&emsp;&emsp;|&emsp;&emsp;\n\t\t<RouterLink page={{path: '/three', name: 'Page Three'}} />\n\t</div>\n\t<div id=\"pageContent\">\n\t\t<!-- Page component updates here -->\n\t\t<svelte:component this={router[$curRoute]} />\n\t</div>\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\n\t// These are directives that allows you to compute css animations based on the logic in your page.\n\timport { fade, slide, blur, fly } from 'svelte/transition';\n\n\t// If we don't specify the 'export' keyword, we will have a private variable within this component. (Think export=public in Java and no export = private.)\n\tlet rando = 0;\n\n\t// Here we are defining the computed value using '$'. This will tell Svelte to calculate this value when this app reacts. Result stored here would be a string containing the emoji.\n\t$: result = Math.round(rando) ? 'ðŸ¤—' : 'ðŸ‘»';\n\n\tfunction setRando() {\t\t\t// Create a function to randomly populate our private variable.\n\t\trando = Math.random();\n\t}\n\n\tfunction setRandoVal(val) {\n\t\trando = val;\n\t}\n\n\tfunction genRandom(min, max) {\n\t\treturn Math.random()*(max-min)+min;\n\t}\n</script>\n\n\n<div class=\"card\">\n\t\t<div class=\"container\">\n\t\t\t<p><b>1. Just outputting a simple private variable: {rando}</b></p>\n\t\t\t<div class=\"notes\">\n\t\t\t\t<code>\n\t\t\t\t\t-- Done in the script portion.<br>\n\t\t\t\t\tlet rando = 0;\n\t\t\t\t\t<br><br>-- Done in the html portion.<br>\n\t\t\t\t\tJust outputting a simple private variable: &lbrace; rando &rbrace;\n\t\t\t\t</code>\n\t\t\t</div>\n\t\t\t<!-- Add button to invoke an event that will change our 'rando' value. -->\n\t\t\t<br><button on:click={setRando}>Randomize me!</button><br>\n\t\t</div>\n\t</div>\n\n\t<div class=\"card\">\n\t\t<div class=\"container\">\n\t\t\t<p>\n\t\t\t\t<b>2. Adding logic to our random output: {Math.round(rando) ? 'ðŸ¤—' : 'ðŸ‘»'}</b>\n\t\t\t\t<br>\n\t\t\t\t<cite>If it rounds to 1 its a winner, if it rounds to 0 its a loser.</cite>\n\t\t\t</p>\n\t\t\t<div class=\"notes\">\n\t\t\t\t<code>\n\t\t\t\t\tAdding logic to our random output: &lbrace; Math.round(rando) ? 'ðŸ¤—' : 'ðŸ‘»' &rbrace;\n\t\t\t\t</code>\n\t\t\t</div>\n\t\t\t<br><button on:click={setRando}>Randomize me!</button><br>\n\t\t</div>\n\t</div>\n\n\t<div class=\"card\">\n\t\t<div class=\"container\">\n\t\t\t<p>\n\t\t\t\t<b>3. Simplifying code reuse: {result} | {result} | {result} | {result}</b>\n\t\t\t\t<br>\n\t\t\t\t<cite>\n\t\t\t\t\tUnfortunately, the above code in 2 is not going to scale very well. If you want to show that same value somewhere else in the page,\n\t\t\t\t\tyou will have to duplicate the logic everywhere. i.e.\n\t\t\t\t\t<br>\n\t\t\t\t\t&lsaquo;p&rsaquo;Adding logic to our random output: &lbrace; Math.round(rando) ? 'ðŸ¤—' : 'ðŸ‘»' &rbrace;&lsaquo;/p&rsaquo;\n\t\t\t\t\t<br>\n\t\t\t\t\t&lsaquo;p&rsaquo;Adding logic to our random output: &lbrace; Math.round(rando) ? 'ðŸ¤—' : 'ðŸ‘»' &rbrace;&lsaquo;/p&rsaquo;\n\t\t\t\t\t<br><br>\n\t\t\t\t\tBest way for such situations would be to define the computed value using '$'. This will tell Svelte to calculate this value when the value 'rando' changes.\n\t\t\t\t</cite>\n\t\t\t</p>\n\t\t\t<div class=\"notes\">\n\t\t\t\t<code>\n\t\t\t\t\t-- Done in the script portion, just once.<br>\n\t\t\t\t\t$: result = Math.round(rando) ? 'ðŸ¤—' : 'ðŸ‘»';\n\t\t\t\t\t<br><br>-- Done in the html portion.<br>\n\t\t\t\t\t&lsaquo;p&rsaquo;&lbrace; result &rbrace;&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lsaquo;p&rsaquo;&lbrace; result &rbrace;&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lsaquo;p&rsaquo;&lbrace; result &rbrace;&lsaquo;/p&rsaquo;\n\t\t\t\t</code>\n\t\t\t</div>\n\t\t\t<br><button on:click={setRando}>Randomize me!</button><br>\n\t\t</div>\n\t</div>\n\n\t<div class=\"card\">\n\t\t<div class=\"container\">\n\t\t\t<p>\n\t\t\t\t<b>4. Binding attributes to DOM elements: {Math.round(rando) ? 'ðŸ¤—' : 'ðŸ‘»'}</b>\n\t\t\t\t<br>\n\t\t\t\t<cite>\n\t\t\t\t\tFor instance, we want to bind the 'rando' variable to the value of a form input, we can do it like so.\n\t\t\t\t\tThis will directly change the value of the variable whenever the value of the given input box changes.\n\t\t\t\t</cite>\n\t\t\t</p>\n\t\t\t<div class=\"notes\">\n\t\t\t\t<code>\n\t\t\t\t\t&lsaquo;input bind:value=&lbrace; rando &rbrace;&rsaquo;\n\t\t\t\t</code>\n\t\t\t</div>\n\t\t\t<br><input bind:value={rando} size=\"10\"><br>\n\t\t</div>\n\t</div>\n\n\t<div class=\"card\">\n\t\t<div class=\"container\">\n\t\t\t<p>\n\t\t\t\t<b>5. Advance on:event directive: {Math.round(rando) ? 'ðŸ¤—' : 'ðŸ‘»'}</b>\n\t\t\t\t<br>\n\t\t\t\t<cite>\n\t\t\t\t\tWe can set value directly to a variable using the on:event directive by forwarding DOM events. Here we are randomly\n\t\t\t\t\tgenerating a number between the min and max values specified in the function parameters and setting it to the 'rando' variable.\n\t\t\t\t</cite>\n\t\t\t</p>\n\t\t\t<div class=\"notes\">\n\t\t\t\t<code>\n\t\t\t\t\t&lsaquo;button on:click=&lbrace;() => setVal(genRandom(0.51, 0.74))&rbrace;&rsaquo;Btw 0.76 to 1&lsaquo;/button&rsaquo;\n\t\t\t\t</code>\n\t\t\t</div>\n\t\t\t<br>\n\t\t\t<!-- We can set value directly to a variable from an on:event directive. -->\n\t\t\t<button on:click={() => setRandoVal(genRandom(0.76, 1))}>Btw 0.76 to 1</button>&emsp;&emsp;\n\t\t\t<button on:click={() => setRandoVal(genRandom(0.50, 0.75))}>Btw 0.50 to 0.75</button>&emsp;&emsp;\n\t\t\t<button on:click={() => setRandoVal(genRandom(0.25, 0.49))}>Btw 0.25 to 0.49</button>&emsp;&emsp;\n\t\t\t<button on:click={() => setRandoVal(genRandom(0, 0.24))}>Btw 0 to 0.24</button>&emsp;&emsp;\n\t\t\t<br>\n\t\t</div>\n\t</div>\n\n\t<div class=\"card\">\n\t\t<div class=\"container\">\n\t\t\t<p>\n\t\t\t\t<b>6. Dynamically changing page template using if-else if-else syntax.</b>\n\t\t\t\t<br>\n\t\t\t\t<cite>\n\t\t\t\t\tThink JSP Standard Tag Library (JSTL) but for Svelte.\n\t\t\t\t</cite>\n\t\t\t</p>\n\t\t\t<div class=\"notes\">\n\t\t\t\t<code>\n\t\t\t\t\t&lbrace;#if rando &rsaquo; 0.75&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&lsaquo;p&rsaquo;Value is more than 0.75.&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lbrace;:else if rando &rsaquo;= 0.5&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&lsaquo;p&rsaquo;Value ranges from 0.50 to 0.75.&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lbrace;:else if rando &rsaquo;= 0.25&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&lsaquo;p&rsaquo;Value ranges from 0.25 to 0.49.&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lbrace;:else&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&lsaquo;p&rsaquo;Value is less than 0.25.&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lbrace;/if&rbrace;\n\t\t\t\t</code>\n\t\t\t</div>\n\t\t\t<br>\n\t\t\t{#if rando > 0.75}\n\t\t\t\t<p>Value is more than 0.75.</p>\n\t\t\t{:else if rando >= 0.5}\n\t\t\t\t<p>Value ranges from 0.50 to 0.75.</p>\n\t\t\t{:else if rando >= 0.25}\n\t\t\t\t<p>Value ranges from 0.25 to 0.49.</p>\n\t\t\t{:else}\n\t\t\t\t<p>Value is less than 0.25.</p>\n\t\t\t{/if}\n\t\t\t<br><input bind:value={rando} size=\"10\"><br>\n\t\t</div>\n\t</div>\n\n\t<div class=\"card\">\n\t\t<div class=\"container\">\n\t\t\t<p>\n\t\t\t\t<b>7. Using Svelte's transition directives</b>\n\t\t\t\t<br>\n\t\t\t\t<cite>\n\t\t\t\t\tThese are directives that allows you to compute css animations based on the logic in your page.\n\t\t\t\t</cite>\n\t\t\t</p>\n\t\t\t<div class=\"notes\">\n\t\t\t\t<code>\n\t\t\t\t\t-- Done in the script portion. Will need to import the transition library.<br>\n\t\t\t\t\timport &lbrace; fade, fly &rbrace; from 'svelte/transition';\n\t\t\t\t\t<br><br>-- Done in the html portion.<br>\n\t\t\t\t\t&lbrace;#if rando &rsaquo; 0.75&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&lsaquo;p <br>\n\t\t\t\t\t\t\t&emsp;&emsp;&emsp;&emsp;in:fade=&lbrace;&lbrace; delay: 200, duration:4000 &rbrace;&rbrace;<br>\n\t\t\t\t\t\t\t&emsp;&emsp;&emsp;&emsp;out:fade=&lbrace;&lbrace; delay: 200, duration:4000 &rbrace;&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&rsaquo;Fading&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lbrace;:else if rando &rsaquo;= 0.5&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&lsaquo;p <br>\n\t\t\t\t\t\t\t&emsp;&emsp;&emsp;&emsp;in:slide=&lbrace;&lbrace; delay: 200, duration:4000 &rbrace;&rbrace;<br>\n\t\t\t\t\t\t\t&emsp;&emsp;&emsp;&emsp;out:slide=&lbrace;&lbrace; delay: 200, duration:4000 &rbrace;&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&rsaquo;Sliding&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lbrace;:else if rando &rsaquo;= 0.25&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&lsaquo;p <br>\n\t\t\t\t\t\t\t&emsp;&emsp;&emsp;&emsp;in:blur=&lbrace;&lbrace; delay: 200, duration:4000 &rbrace;&rbrace;<br>\n\t\t\t\t\t\t\t&emsp;&emsp;&emsp;&emsp;out:blur=&lbrace;&lbrace; delay: 200, duration:4000 &rbrace;&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&rsaquo;Bluring&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lbrace;:else&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&lsaquo;p <br>\n\t\t\t\t\t\t\t&emsp;&emsp;&emsp;&emsp;in:fly=&lbrace;&lbrace; delay: 200, x: 500, duration:4000 &rbrace;&rbrace;<br>\n\t\t\t\t\t\t\t&emsp;&emsp;&emsp;&emsp;out:fly=&lbrace;&lbrace; delay: 200, x: -250, duration:4000 &rbrace;&rbrace;<br>\n\t\t\t\t\t\t&emsp;&emsp;&rsaquo;Flying&lsaquo;/p&rsaquo;<br>\n\t\t\t\t\t&lbrace;/if&rbrace;<br>\n\t\t\t\t</code>\n\t\t\t</div>\n\t\t\t<br>\n\t\t\t<button on:click={() => setRandoVal(genRandom(0.76, 1))}>Fade</button>&emsp;&emsp;\n\t\t\t<button on:click={() => setRandoVal(genRandom(0.51, 0.74))}>Slide</button>&emsp;&emsp;\n\t\t\t<button on:click={() => setRandoVal(genRandom(0.26, 0.49))}>Blur</button>&emsp;&emsp;\n\t\t\t<button on:click={() => setRandoVal(genRandom(0, 0.24))}>Fly</button>&emsp;&emsp;\n\t\t\t<br>\n\t\t\t{#if rando > 0.75}\n\t\t\t\t<p \n\t\t\t\t\tin:fade={{ delay: 200, duration:4000 }}\n\t\t\t\t\tout:fade={{ delay: 200, duration:300 }}\n\t\t\t\t>Fading</p>\n\t\t\t{:else if rando >= 0.5}\n\t\t\t\t<p \n\t\t\t\t\tin:slide={{ delay: 200, duration:4000 }}\n\t\t\t\t\tout:slide={{ delay: 200, duration:300 }}\n\t\t\t\t>Sliding</p>\n\t\t\t{:else if rando >= 0.25}\n\t\t\t\t<p \n\t\t\t\t\tin:blur={{ delay: 200, duration:4000 }}\n\t\t\t\t\tout:blur={{ delay: 200, duration:300 }}\n\t\t\t\t>Bluring</p>\n\t\t\t{:else}\n\t\t\t\t<p \n\t\t\t\t\tin:fly={{ delay: 200, x: 500, duration:4000 }}\n\t\t\t\t\tout:fly={{ delay: 200, x: -250, duration:300 }}\n\t\t\t\t>Flying</p>\n\t\t\t{/if}\n\t\t\t<br>\n\t\t</div>\n\t</div>\n\n\n\n\t<!-- Add button to invoke an event that will change our 'rando' value. -->\n\t<button on:click={setRando}>Randomize me!</button>\n\n\n<style>\n\tcite {\n\t\tfont-size: 80%;\n\t}\n\n\t.card {\n\t\tbox-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n\t\ttransition: 0.3s;\n\t\twidth: 70%;\n\t\tborder-radius: 5px;\n\t\t-ms-transform: translate(20%, -0%);\n\t\ttransform: translate(21.4%, -0%);\n\t\tmargin-bottom: 30px;\n\t}\n\n\t.card:hover {\n\t\tbox-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n\t}\n\n\t.container {\n\t\tpadding: 2px 16px;\n\t}\n\n\t.notes {\n\t\ttext-align: left;\n\t\tbackground-color: #ddffdd;\n\t\tborder-left: 6px solid #4CAF50;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAyCC,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,eAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACsLD,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,GAAG,AACf,CAAC,AAED,KAAK,cAAC,CAAC,AACN,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACvC,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,GAAG,CACV,aAAa,CAAE,GAAG,CAClB,aAAa,CAAE,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAClC,SAAS,CAAE,UAAU,KAAK,CAAC,CAAC,GAAG,CAAC,CAChC,aAAa,CAAE,IAAI,AACpB,CAAC,AAED,mBAAK,MAAM,AAAC,CAAC,AACZ,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AAED,UAAU,cAAC,CAAC,AACX,OAAO,CAAE,GAAG,CAAC,IAAI,AAClB,CAAC,AAED,MAAM,cAAC,CAAC,AACP,UAAU,CAAE,IAAI,CAChB,gBAAgB,CAAE,OAAO,CACzB,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC/B,CAAC"
}